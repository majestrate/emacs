* Minor settings
** Disable the *bars
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
** Disable saving
 #+BEGIN_SRC emacs-lisp
   (setq make-backup-file nil)
   (setq auto-save-default nil)
 #+END_SRC
** Yes or no
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
** electric pair
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			     (?\{ . ?\})
			     (?\( . ?\))
			     (?\[ . ?\])
			     (?\" . ?\")
			     ))
  (electric-pair-mode t)
#+END_SRC
** Change startup buffer to scratch
 #+BEGIN_SRC emacs-lisp
   (setq initial-buffer-choice t)
 #+END_SRC
** show lines and columns on the modeline
#+BEGIN_SRC emacs-lisp
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC
** visual line mode
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC
* programming
** company
 #+BEGIN_SRC emacs-lisp
   (use-package company
	   :ensure t
	   :config
	   (setq company-idle-delay 0)
	   (setq company-minimum-prefix-length 3)
   (with-eval-after-load 'company
	   (define-key company-active-map (kbd "M-n") nil)
	   (define-key company-active-map (kbd "M-p") nil)
	   (define-key company-active-map (kbd "C-n") #'company-select-next)
	   (define-key company-active-map (kbd "C-p") #'company-select-previous)
	   (define-key company-active-map (kbd "SPC") #'company-abort)))
 #+END_SRC
** web programming
*** company web
 #+BEGIN_SRC emacs-lisp
   (use-package company-web
     :ensure t
     :config)
 #+END_SRC
*** company web hook to ocmpany
 #+BEGIN_SRC emacs-lisp
	 (defun my-new-web-mode-hook ()
		 (set (make-local-variable 'company-backends) '(company-css company-web-html company-yasnippet company-files)))
	 (add-hook 'web-mode-hook #'my-new-web-mode-hook)
 #+END_SRC
*** emmet
 #+BEGIN_SRC emacs-lisp
   (use-package emmet-mode
     :ensure t
     :config)
 #+END_SRC
*** company hook to js2 mode
#+BEGIN_SRC emacs-lisp
  (use-package company-tern
    :ensure t
    :config
    (add-to-list 'company-backends 'company-tern)
    (add-hook 'js2-mode-hook (lambda ()
			     (tern-mode)
			     (company-mode))))
#+END_SRC
*** web mode
**** load when opening web related files
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.js\\'" . web-mode)))
  #+END_SRC
**** set indentations
  #+BEGIN_SRC emacs-lisp
    (defun my-web-mode-hook ()
      "Hooks for Web mode."
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (setq web-mode-css-indent-offset 2)
    )
    (add-hook 'web-mode-hook  'my-web-mode-hook)    
    (setq tab-width 2)
  #+END_SRC
**** highlight colums
  #+BEGIN_SRC emacs-lisp
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-current-element-highlight t)
  #+END_SRC
**** turn on emmet
 #+BEGIN_SRC emacs-lisp
   (add-hook 'web-mode-hook  'emmet-mode) 
   (add-hook 'web-mode-before-auto-complete-hooks
       '(lambda ()
	(let ((web-mode-cur-language
	       (web-mode-language-at-pos)))
		  (if (string= web-mode-cur-language "php")
	      (yas-activate-extra-mode 'php-mode)
	    (yas-deactivate-extra-mode 'php-mode))
		  (if (string= web-mode-cur-language "css")
	      (setq emmet-use-css-transform t)
	    (setq emmet-use-css-transform nil)))))
 #+END_SRC
*** impatient mode
#+BEGIN_SRC emacs-lisp
  (use-package impatient-mode
	  :ensure t)
#+END_SRC
*** skewer mode
#+BEGIN_SRC emacs-lisp
  (use-package skewer-mode
    :ensure t
    :config
    (add-hook 'js2-mode-hook 'skewer-mode)
    (add-hook 'css-mode-hook 'skewer-css-mode)
    (add-hook 'html-mode-hook 'skewer-html-mode))
#+END_SRC
*** js2 mode
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-hook 'js2-mode-hook #'js2-imenu-extras-mode))
#+END_SRC
*** yasnippet
 #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :ensure t
     :config
     (use-package yasnippet-snippets
     :ensure t)
     (yas-reload-all))
 #+END_SRC
*** flycheck
 #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :ensure t)
 #+END_SRC
** clojure programming
*** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t)
#+END_SRC
*** clojure-mode
#+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t)
#+END_SRC
*** cider
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)
#+END_SRC
* which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
* expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
#+END_SRC
* zapping to char
#+BEGIN_SRC emacs-lisp
  (use-package zzz-to-char
    :ensure t
    :bind ("M-z" . zzz-up-to-char))
#+END_SRC
* beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
* Org
** basic config
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Org Bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** org snippets
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
* modeline
** spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      (setq spaceline-buffer-encoding-abbrev-p nil)
      (setq spaceline-line-column-p nil)
      (setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme))
#+END_SRC
** diminish 
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'which-key-mode)
    (diminish 'linum-relative-mode)
    (diminish 'hungry-delete-mode)
    (diminish 'visual-line-mode)
    (diminish 'subword-mode)
    (diminish 'beacon-mode)
    (diminish 'irony-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'auto-revert-mode)
    (diminish 'rainbow-delimiters-mode)
    (diminish 'rainbow-mode))
#+END_SRC
* IDO
** Enable IDO mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** Ido vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** smex 
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize )
    :bind
    ("M-x" . smex))
#+END_SRC
** switch buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* buffers
** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
* avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* rainbow
** rainbow
 #+BEGIN_SRC emacs-lisp
   (use-package rainbow-mode
     :ensure t
     :init (rainbow-mode 1))
 #+END_SRC
** rainbow delimiters
 #+BEGIN_SRC emacs-lisp
   (use-package rainbow-delimiters
     :ensure t
     :init
     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
 #+END_SRC
* kill ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . 'swiper))
#+END_SRC
* linum
#+BEGIN_SRC emacs-lisp
	(use-package linum-relative
		:ensure t
		:config
			(setq linum-relative-current-symbol "")
			(add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC
* elcord
#+BEGIN_SRC emacs-lisp
  (use-package elcord
    :ensure t)
#+END_SRC
* follow split window
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
* multiple-cursors
#+BEGIN_SRC emacs-lisp
	(use-package multiple-cursors
		:ensure t
		:config
		(global-set-key (kbd "C->") 'mc/mark-next-like-this)
		(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
		(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC
* switch window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
    :bind
      ([remap other-window] . switch-window))
#+END_SRC
